In this homework, you are asked to implement a multithreaded program that will allow us to simulate the four basic CPU scheduling algorithms (namely, FIFO, SJF, PR, and RR) and measure their performance metrics (i.e., CPU utilization, Throughput, Turnaround time, and Waiting time in Ready Queue). Your program will be emulating/simulating the processes whose priority, sequence of CPU burst time (ms) and I/O burst time (ms) will be given in an input file.

Assume that all scheduling algorithms except RR will be non-preemptive, and all scheduling algorithms except PR will ignore process priorities (i.e., all processes have the same priority in FIFO, SJF and RR). Also assume that there is only one IO device, and all I/O requests will be served using that device in a FIFO manner (note that, to focus on CPU queue in the lecture notes, we were assuming unlimited number of I/O devices, but that was not practical).

--------------------------------------------------------------------------------------------------------------------------

Your program will take the name of the scheduling algorithm, related parameters (if any), and an input file name from command line. Here how your program should be executed:

prog -alg [FIFO|SJF|PR|RR] [-quantum [integer (ms)]] -input [file name]

For each algorithm, it can be executed as:

prog -alg FIFO -input input2.txt 

prog -alg SJF  -input input2.txt

prog -alg PR   -input input2.txt

prog -alg RR -quantum 30 -input input2.txt

The output of your program will be as follows:

--------------------------------------------------------------------------------------------------------------------

     Input File Name              : input file name

     CPU Scheduling Alg           : FIFO|SJF|PR|RR (quantum)

     CPU utilization              : ....

     Throughput                   : ....

     Avg. Turnaround time         : ....

     Avg. Waiting time in R queue : ....

--------------------------------------------------------------------------------------------------------------------

Here is a sample input file input2.txt Download input2.txt(download this). The output results can be copy/pasted into an output file like output2.txtDownload output2.txt

Here are the details of the input file format, where each line starts with one of the following keywords: proc, sleep, stop.

Following proc, there is a sequence of integer numbers: the first one represents the priority (1: lowest, ..., 5: normal, ..., 10: highest). The second number (an odd number) shows the number of remaining integers representing CPU burst and I/O burst times (ms) in an alternating manner for that process. It is odd number because the last number will be the last CPU burst time after which that process exits.
Following sleep, there will be an integer number representing the time (ms) after which there will be another process.
Following stop, there is no number, and this is the end of input file. 
One of the threads in your program (e.g., FileRead_thread()) would be responsible for processing this input file as follows. As long as it reads proc, it will create a new process and put it in a ready queue (clearly, since we are just simulating CPU scheduling,  this process is not an actual one, it will be just a simple data structure (similar to PCB) that contains the given priority and the sequence of CPU burst and I/O burst times, and other fields to use in our simulation). When this thread reads sleep x, it will sleep x ms and then try to read new processes from the file, create PCB structure and put into ready queue. Upon reading stop, this thread will quit.
------------------------------------------------------------------------------------------------------------------------
In this program, the main thread will create at least the following three threads and wait until they are done:

File Read thread, as described above, will read the above input file, create a process (not a real process just a data structure (PCB) representing the characteristic of the process that will be emulated/simulated, and puts it in a ready queue.
CPU scheduler thread will check ready queue; if there is a process, it will pick one according to the scheduling algorithm from ready queue and hold CPU resource for the given CPU burst time (or for quantum time if the scheduling algorithm is RR). That means CPU thread will simply sleep for the given CPU burst time to emulate/simulate the process. Then it will release CPU resource and put this process into I/O queue (or ready queue if RR is used) or just terminate if this is the last CPU burst.  Then CPU scheduler thread will check ready queue again and repeat the same for the next process.
I/O system thread will check IO queue; if there is a process, it will sleep for the given I/O burst time to emulate/simulate the usage of IO device. It then puts this process back into ready queue. Finally, it will check I/O queue and repeat the same ....
